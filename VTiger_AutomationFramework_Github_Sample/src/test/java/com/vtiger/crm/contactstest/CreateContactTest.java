package com.vtiger.crm.contactstest;

import java.io.IOException;

import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;

import com.aventstack.extentreports.Status;
import com.vtiger.crm.basetest.BaseClass;
import com.vtiger.crm.generic.webdriverutility.StaticUtility;
import com.vtiger.crm.objectrepositoryutility.ContactInformationPage;
import com.vtiger.crm.objectrepositoryutility.ContactsPage;
import com.vtiger.crm.objectrepositoryutility.CreatingNewContactPage;
import com.vtiger.crm.objectrepositoryutility.CreatingNewOrganizationPage;
import com.vtiger.crm.objectrepositoryutility.HomePage;
import com.vtiger.crm.objectrepositoryutility.OrganizationInformationPage;
import com.vtiger.crm.objectrepositoryutility.OrganizationsPage;
import com.vtiger.crm.objectrepositoryutility.SelectOrganizationPage;

@Listeners(com.vtiger.crm.listenerutility.ListenerImpClass.class)
public class CreateContactTest extends BaseClass{
	@Test(groups={"smokeTest", "regressionTest"})
	public void createContactTest() throws IOException, InterruptedException {
		StaticUtility.getTest().log(Status.INFO, "navigating to contacts module");
		HomePage hp=new HomePage(driver);
		hp.getContactsLink().click();
		ContactsPage cp=new ContactsPage(driver);
		cp.getCreateContactIcon().click();
		StaticUtility.getTest().log(Status.INFO, "reading last name of contact from excel");
		String LAST_NAME= Elib.getDataFromExcelFile("contacts", 1, 1);
		StaticUtility.getTest().log(Status.INFO, "unique name generated by using random number");
		String U_LAST_NAME=LAST_NAME+JLib.getRandomNumber();
		StaticUtility.getTest().log(Status.INFO, "entering contact name");
		CreatingNewContactPage cncp=new CreatingNewContactPage(driver);
		cncp.getLastnameTxtField().sendKeys(U_LAST_NAME);
		StaticUtility.getTest().log(Status.INFO, "clicking on save button");
		cncp.getSaveBtn().click();
		ContactInformationPage cip=new ContactInformationPage(driver);
		String MSG_HEADER=cip.getMessageHeaderTxt().getText();
		String LAST_NAME_F=cip.getLastnameTxt().getText();
		StaticUtility.getTest().log(Status.INFO, "verifying contact name in message header and contact text field");
		Assert.assertTrue(MSG_HEADER.contains(U_LAST_NAME), U_LAST_NAME+" is not verified in message header");
		Assert.assertEquals(LAST_NAME_F, U_LAST_NAME, U_LAST_NAME+" is not verified in contact name");
	}
	@Test /*
			 * ( retryAnalyzer = com.vtiger.crm.listenerutility.RetryAnalyzerImpClass.class)
			 */
			 
	public void createContactWithOrgTest() throws IOException, InterruptedException {
		StaticUtility.getTest().log(Status.INFO, "navigate to organizations module");
		//navigate to organizations module
		HomePage hp=new HomePage(driver);
		hp.getOrganizationsLink().click();
		OrganizationsPage op=new OrganizationsPage(driver);
		op.getCreateOrgIcon().click();
		StaticUtility.getTest().log(Status.INFO, "Read organization name from excel");
		//Read organization name from excel
		String ORG_NAME= Elib.getDataFromExcelFile("contacts", 5, 1);
		//random number generator
		String U_ORG_NAME=ORG_NAME+JLib.getRandomNumber();
		//enter org name
		CreatingNewOrganizationPage cnop=new CreatingNewOrganizationPage(driver);
		cnop.getOrgnameTxtField().sendKeys(U_ORG_NAME);
		//save
		cnop.getSaveBtn().click();
		OrganizationInformationPage oip=new OrganizationInformationPage(driver);
		String ORG_NAME_F=oip.getOrgnameTxt().getText();
		String MSG_HEADER=oip.getMessageHeaderTxt().getText();
		//verification
		Assert.assertTrue(MSG_HEADER.contains(U_ORG_NAME), U_ORG_NAME+" is not verified in message header in organization information");
		Assert.assertEquals(ORG_NAME_F, U_ORG_NAME, U_ORG_NAME+" is not verified in org name in organization information");
		//navigate to contacts module
		ContactsPage cp=new ContactsPage(driver);
		hp.getContactsLink().click();
		cp.getCreateContactIcon().click();
		String LAST_NAME= Elib.getDataFromExcelFile("contacts", 5, 2);
		//random number generator
		String U_LAST_NAME=LAST_NAME+JLib.getRandomNumber();
		//enter org name
		CreatingNewContactPage cncp=new CreatingNewContactPage(driver);
		cncp.getLastnameTxtField().sendKeys(U_LAST_NAME);
		cncp.getSelectOrgIcon().click();
		WLib.switchToTabOnUrl(driver, "module=Accounts");
		SelectOrganizationPage sop=new SelectOrganizationPage(driver);
		sop.selectOrgName(U_ORG_NAME);
		WLib.switchToTabOnUrl(driver, "module=Contacts");
		//save
		cncp.getSaveBtn().click();
		ContactInformationPage cip=new ContactInformationPage(driver);
		MSG_HEADER=cip.getMessageHeaderTxt().getText();
		String LAST_NAME_F=cip.getLastnameTxt().getText();
		String CON_ORG_NAME_F=cip.getOrgnameTxt().getText();
		//verification
		Assert.assertTrue(MSG_HEADER.contains(U_LAST_NAME), U_LAST_NAME+" is not verified in message header in contact information");
		Assert.assertEquals(LAST_NAME_F, U_LAST_NAME, U_LAST_NAME+" is not verified in contact name in contact information");
		Assert.assertEquals(
				CON_ORG_NAME_F/* .trim() */, U_ORG_NAME, U_ORG_NAME+" is not verified in contact information");
	}
	@Test(groups="regressionTest")
	public void createContactWithSupportDateTest() throws InterruptedException, IOException {
		//navigate to organizations module
		HomePage hp=new HomePage(driver);
		hp.getContactsLink().click();
		ContactsPage cp=new ContactsPage(driver);
		cp.getCreateContactIcon().click();
		//Read contact name from excel
		String LAST_NAME= Elib.getDataFromExcelFile("contacts", 3, 1);
		//random number generator
		String U_LAST_NAME=LAST_NAME+JLib.getRandomNumber();
		//enter org name
		CreatingNewContactPage cncp=new CreatingNewContactPage(driver);
		cncp.getLastnameTxtField().sendKeys(U_LAST_NAME);
		//capture sys date
		String START_DATE = JLib.getSysDateInYYYYMMDD();
		String END_DATE = JLib.getRequiredDateYYYYMMDD(30);
		WebElement start_date=cncp.getSupportStartDateTxtField();
		start_date.clear();
		start_date.sendKeys(START_DATE);
		WebElement end_date=cncp.getSupportEndDateTxtField();
		end_date.clear();
		end_date.sendKeys(END_DATE);
		//save
		cncp.getSaveBtn().click();
		//verification
		ContactInformationPage cip=new ContactInformationPage(driver);
		String START_DATE_F=cip.getSupportSartDateTxt().getText();
		String END_DATE_F = cip.getSupportEndDateTxt().getText();
		Assert.assertEquals(START_DATE_F, START_DATE, START_DATE+" is not verified in contact information");
		Assert.assertEquals(END_DATE_F, END_DATE, END_DATE+" is not verified in contact information");	
	}
}
